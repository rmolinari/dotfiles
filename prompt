## -*- mode: shell-script -*-

#
# Set up my prompt

#
# PROMPT_COMMAND
#
# Note that this can be used to do things other than prompt
# manipulation.  It is executed just before the prompt is displayed.
function __my_prompt_command
{
    # Set DISPLAY, etc., to the values from the last login.  See
    # bash-profile for the setup.
    if [ -f "$HOME/.environment" ]
    then
        . $HOME/.environment
    fi
}
export PROMPT_COMMAND=__my_prompt_command

# When we are in a git-controlled directory the prompt includes the current
# git branch and status.  In directories not in a git project there is no
# such representation.

function __prompt_exit_val
{
    local val=$?
    if [[ $val != 0 ]]
    then
        printf "${1:- (%s)}" "$val"
    fi
}


function setprompt 
{
    function prompt_escape {
        echo "\[$1\]"
    }

    # Get escape sequence for a foregreound color
    #
    # We use tput for portability.  See 'man tput' and 'man 5 terminfo' for
    # details on what is possible.
    function fg {
        # clear all attributes and set foreground color
        prompt_escape $(tput sgr0; tput setaf $1)
    }

    # Get escape sequence for a background color
    #
    function bg {
        prompt_escape $(tput setab $1)
    }

    __log_msg "prompt: Defining BOLD and RESET_ALL.."    
    local BOLD=$(prompt_escape $(tput bold))
    local RESET_ALL=$(prompt_escape $(tput sgr0))

    # Define global variables for each color and bold/bright: __PROMPT_COLOR_RED,
    # __PROMPT_COLOR_B_RED, __PROMPT_COLOR_GREEN, etc
    # 
    # Each of these clears all text attributes first.  In particular they clear the background color
    # so you'll need to keep track of that separately.
    #
    # We also define BG_<color> to set the background in each case.
    local COLOR_PREFIX="__PROMPT_COLOR_"
    local COLORS_DONE=${COLOR_PREFIX}DONE
    function gen_colors {
	__log_msg "prompt: Setting up variables for colors..."

	if [[ -z ${!COLORS_DONE} ]]
	then

	    local colors=( BLACK RED GREEN BROWN BLUE PURPLE CYAN GRAY )
	    for code in ${!colors[@]}
	    do
		local color=${colors[code]}
		eval "export ${COLOR_PREFIX}${color}=\$(fg ${code})"
		eval "export ${COLOR_PREFIX}B_${color}=\$(fg ${code})\${BOLD}"
		eval "export ${COLOR_PREFIX}BG_${color}=\$(bg ${code})"
	    done

	    export ${COLORS_DONE}=1

	    __log_msg "prompt: ...done setting up variables for colors"
	else
	    __log_msg "prompt: ...colors already done!"
	fi
    }

    ##
    # Define local variables for each color and bold/bright: RED, B_RED, GREEN, B_GREEN, etc
    # Each of these clears all text attributes first.  In particular they clear the
    # background color so you'll need to keep track of that separately.
    #
    # We also define BG_<color> to set the background in each case.
    #
    gen_colors
    for global_color in ${!__PROMPT_COLOR_*}; do
	local color=${global_color#__PROMPT_COLOR_}
	eval "local ${color}=\${!global_color}"
    done

    local BASE=${CYAN}

    # Show non-zero exit value
    local exit_val="\$(__prompt_exit_val '${RED}%s ${BASE}')"

    ##
    # Git decoration
    export GIT_PS1_SHOWDIRTYSTATE=true
    export GIT_PS1_SHOWSTASHSTATE=true
    export GIT_PS1_SHOWUNTRACKEDFILES=true
    local git_status="\$(__git_ps1 ' ${BROWN}[%s]${BASE}')"

    PS1="${BASE}[${exit_val}\u:\w]${git_status}\n\$(date +%H:%M:%S) ${RESET_ALL}"

    unset -f prompt_escape fg bg
}

setprompt
unset -f setprompt
